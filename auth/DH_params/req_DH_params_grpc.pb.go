// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package DH_params

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DHParams_ServiceClient is the client API for DHParams_Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DHParams_ServiceClient interface {
	ProcessRequest(ctx context.Context, in *DHParams_Request, opts ...grpc.CallOption) (*DHParams_Response, error)
}

type dHParams_ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDHParams_ServiceClient(cc grpc.ClientConnInterface) DHParams_ServiceClient {
	return &dHParams_ServiceClient{cc}
}

func (c *dHParams_ServiceClient) ProcessRequest(ctx context.Context, in *DHParams_Request, opts ...grpc.CallOption) (*DHParams_Response, error) {
	out := new(DHParams_Response)
	err := c.cc.Invoke(ctx, "/DH_params_Service/ProcessRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DHParams_ServiceServer is the server API for DHParams_Service service.
// All implementations must embed UnimplementedDHParams_ServiceServer
// for forward compatibility
type DHParams_ServiceServer interface {
	ProcessRequest(context.Context, *DHParams_Request) (*DHParams_Response, error)
	mustEmbedUnimplementedDHParams_ServiceServer()
}

// UnimplementedDHParams_ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDHParams_ServiceServer struct {
}

func (UnimplementedDHParams_ServiceServer) ProcessRequest(context.Context, *DHParams_Request) (*DHParams_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessRequest not implemented")
}
func (UnimplementedDHParams_ServiceServer) mustEmbedUnimplementedDHParams_ServiceServer() {}

// UnsafeDHParams_ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DHParams_ServiceServer will
// result in compilation errors.
type UnsafeDHParams_ServiceServer interface {
	mustEmbedUnimplementedDHParams_ServiceServer()
}

func RegisterDHParams_ServiceServer(s grpc.ServiceRegistrar, srv DHParams_ServiceServer) {
	s.RegisterService(&DHParams_Service_ServiceDesc, srv)
}

func _DHParams_Service_ProcessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHParams_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHParams_ServiceServer).ProcessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DH_params_Service/ProcessRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHParams_ServiceServer).ProcessRequest(ctx, req.(*DHParams_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// DHParams_Service_ServiceDesc is the grpc.ServiceDesc for DHParams_Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DHParams_Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DH_params_Service",
	HandlerType: (*DHParams_ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessRequest",
			Handler:    _DHParams_Service_ProcessRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "req_DH_params.proto",
}
