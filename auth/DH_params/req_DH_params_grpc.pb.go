// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package DH_params

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DHParamsServiceClient is the client API for DHParamsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DHParamsServiceClient interface {
	ProcessRequest(ctx context.Context, in *DHParamsRequest, opts ...grpc.CallOption) (*DHParamsResponse, error)
}

type dHParamsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDHParamsServiceClient(cc grpc.ClientConnInterface) DHParamsServiceClient {
	return &dHParamsServiceClient{cc}
}

func (c *dHParamsServiceClient) ProcessRequest(ctx context.Context, in *DHParamsRequest, opts ...grpc.CallOption) (*DHParamsResponse, error) {
	out := new(DHParamsResponse)
	err := c.cc.Invoke(ctx, "/DHParamsService/ProcessRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DHParamsServiceServer is the server API for DHParamsService service.
// All implementations must embed UnimplementedDHParamsServiceServer
// for forward compatibility
type DHParamsServiceServer interface {
	ProcessRequest(context.Context, *DHParamsRequest) (*DHParamsResponse, error)
	mustEmbedUnimplementedDHParamsServiceServer()
}

// UnimplementedDHParamsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDHParamsServiceServer struct {
}

func (UnimplementedDHParamsServiceServer) ProcessRequest(context.Context, *DHParamsRequest) (*DHParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessRequest not implemented")
}
func (UnimplementedDHParamsServiceServer) mustEmbedUnimplementedDHParamsServiceServer() {}

// UnsafeDHParamsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DHParamsServiceServer will
// result in compilation errors.
type UnsafeDHParamsServiceServer interface {
	mustEmbedUnimplementedDHParamsServiceServer()
}

func RegisterDHParamsServiceServer(s grpc.ServiceRegistrar, srv DHParamsServiceServer) {
	s.RegisterService(&DHParamsService_ServiceDesc, srv)
}

func _DHParamsService_ProcessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHParamsServiceServer).ProcessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DHParamsService/ProcessRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHParamsServiceServer).ProcessRequest(ctx, req.(*DHParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DHParamsService_ServiceDesc is the grpc.ServiceDesc for DHParamsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DHParamsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DHParamsService",
	HandlerType: (*DHParamsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessRequest",
			Handler:    _DHParamsService_ProcessRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "req_DH_params.proto",
}
