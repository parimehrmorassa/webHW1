// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetUsersInjectClient is the client API for GetUsersInject service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetUsersInjectClient interface {
	GetData(ctx context.Context, in *GetDataRequestInject, opts ...grpc.CallOption) (*GetDataResponseInject, error)
}

type getUsersInjectClient struct {
	cc grpc.ClientConnInterface
}

func NewGetUsersInjectClient(cc grpc.ClientConnInterface) GetUsersInjectClient {
	return &getUsersInjectClient{cc}
}

func (c *getUsersInjectClient) GetData(ctx context.Context, in *GetDataRequestInject, opts ...grpc.CallOption) (*GetDataResponseInject, error) {
	out := new(GetDataResponseInject)
	err := c.cc.Invoke(ctx, "/get_users_inject/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetUsersInjectServer is the server API for GetUsersInject service.
// All implementations must embed UnimplementedGetUsersInjectServer
// for forward compatibility
type GetUsersInjectServer interface {
	GetData(context.Context, *GetDataRequestInject) (*GetDataResponseInject, error)
	mustEmbedUnimplementedGetUsersInjectServer()
}

// UnimplementedGetUsersInjectServer must be embedded to have forward compatible implementations.
type UnimplementedGetUsersInjectServer struct {
}

func (UnimplementedGetUsersInjectServer) GetData(context.Context, *GetDataRequestInject) (*GetDataResponseInject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedGetUsersInjectServer) mustEmbedUnimplementedGetUsersInjectServer() {}

// UnsafeGetUsersInjectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetUsersInjectServer will
// result in compilation errors.
type UnsafeGetUsersInjectServer interface {
	mustEmbedUnimplementedGetUsersInjectServer()
}

func RegisterGetUsersInjectServer(s grpc.ServiceRegistrar, srv GetUsersInjectServer) {
	s.RegisterService(&GetUsersInject_ServiceDesc, srv)
}

func _GetUsersInject_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequestInject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetUsersInjectServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/get_users_inject/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetUsersInjectServer).GetData(ctx, req.(*GetDataRequestInject))
	}
	return interceptor(ctx, in, info, handler)
}

// GetUsersInject_ServiceDesc is the grpc.ServiceDesc for GetUsersInject service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetUsersInject_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "get_users_inject",
	HandlerType: (*GetUsersInjectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetData",
			Handler:    _GetUsersInject_GetData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "get_users_with_sql_inject.proto",
}
